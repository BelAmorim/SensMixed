
R Under development (unstable) (2015-08-22 r69160) -- "Unsuffered Consequences"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "SensMixed"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('SensMixed')
Loading required package: lmerTest
Loading required package: Matrix
Loading required package: lme4

Attaching package: 'lmerTest'

The following object is masked from 'package:lme4':

    lmer

The following object is masked from 'package:stats':

    step


Attaching package: 'SensMixed'

The following object is masked from 'package:lmerTest':

    ham

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("SensMixedUI")
> ### * SensMixedUI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SensMixedUI
> ### Title: Graphical User interface for the SensMixed package
> ### Aliases: SensMixedUI
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D library(SensMixed)
> ##D SensMixedUI()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("consmixed")
> ### * consmixed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: consmixed
> ### Title: Automated model selection process for the Consumer data
> ### Aliases: consmixed
> 
> ### ** Examples
> 
> library(SensMixed)
> 
> #convert some variables to factors in Tham
> ham <- convertToFactors(ham, c("Consumer", "Product", "Information", "Gender"))
> 
> 
> consmixed(response="Liking", 
+ Prod_effects= c("Product","Information"), 
+ Cons_effects=c("Gender","Age"), Cons = "Consumer", data =ham, structure=1)

Random effects:
                     Chi.sq Chi.DF elim.num p.value
Information:Consumer   1.25      1        1  0.2626
Product:Consumer     163.50      1     kept  <1e-07
Consumer               3.42      1     kept  0.0645

Fixed effects:
             Sum Sq Mean Sq NumDF DenDF F.value Pr(>F)
Product     19.3466  6.4489     3   240  3.8291 0.0105
Information  6.5201  6.5201     1   323  3.8714 0.0500
Gender       1.4781  1.4781     1    78  0.8777 0.3517
Age          0.0254  0.0254     1    78  0.0151 0.9026

Least squares means:
               Product Information Gender Estimate Standard Error  DF t-value
Product  1           1          NA     NA    5.807          0.233 309    24.9
Product  2           2          NA     NA    5.103          0.233 309    21.9
Product  3           3          NA     NA    6.091          0.233 309    26.2
Product  4           4          NA     NA    5.924          0.233 309    25.4
Information  1      NA           1     NA    5.631          0.141 103    40.0
Information  2      NA           2     NA    5.832          0.141 103    41.5
Gender  1           NA          NA      1    5.857          0.186  78    31.4
Gender  2           NA          NA      2    5.606          0.189  78    29.7
               Lower CI Upper CI p-value    
Product  1         5.35     6.27  <2e-16 ***
Product  2         4.65     5.56  <2e-16 ***
Product  3         5.63     6.55  <2e-16 ***
Product  4         5.47     6.38  <2e-16 ***
Information  1     5.35     5.91  <2e-16 ***
Information  2     5.55     6.11  <2e-16 ***
Gender  1          5.49     6.23  <2e-16 ***
Gender  2          5.23     5.98  <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

 Differences of LSMEANS:
                  Estimate Standard Error    DF t-value Lower CI Upper CI
Product 1 - 2          0.7          0.314 240.0    2.24   0.0849    1.323
Product 1 - 3         -0.3          0.314 240.0   -0.90  -0.9027    0.335
Product 1 - 4         -0.1          0.314 240.0   -0.37  -0.7361    0.501
Product 2 - 3         -1.0          0.314 240.0   -3.14  -1.6064   -0.369
Product 2 - 4         -0.8          0.314 240.0   -2.61  -1.4398   -0.202
Product 3 - 4          0.2          0.314 240.0    0.53  -0.4521    0.785
Information 1 - 2     -0.2          0.102 323.0   -1.97  -0.4012    0.000
Gender 1 - 2           0.3          0.268  78.0    0.94  -0.2825    0.785
                  p-value   
Product 1 - 2       0.026 * 
Product 1 - 3       0.367   
Product 1 - 4       0.709   
Product 2 - 3       0.002 **
Product 2 - 4       0.009 **
Product 3 - 4       0.596   
Information 1 - 2   0.050 * 
Gender 1 - 2        0.352   
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Final model:
lme4::lmer(formula = Liking ~ Product + (1 | Product:Consumer) + 
    Information + Gender + Age + (1 | Consumer), data = data, 
    REML = reml.lmerTest.private, contrasts = l.lmerTest.private.contrast, 
    devFunOnly = devFunOnly.lmerTest.private)
> 
> 
> 
> 
> cleanEx()
> nameEx("convertToFactors")
> ### * convertToFactors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convertToFactors
> ### Title: converts variables of the data frame to factors
> ### Aliases: convertToFactors
> 
> ### ** Examples
> 
> library(SensMixed)
> 
> str(ham)
'data.frame':	648 obs. of  6 variables:
 $ Consumer   : int  1 1 1 1 1 1 1 1 2 2 ...
 $ Product    : int  1 1 2 2 3 3 4 4 1 1 ...
 $ Liking     : int  5 5 4 4 4 6 6 6 5 5 ...
 $ Information: int  1 2 1 2 1 2 1 2 1 2 ...
 $ Gender     : int  1 1 1 1 1 1 1 1 2 2 ...
 $ Age        : int  46 46 46 46 46 46 46 46 48 48 ...
> 
> ham <- convertToFactors(ham, c("Gender"))
> 
> str(ham)
'data.frame':	648 obs. of  6 variables:
 $ Consumer   : int  1 1 1 1 1 1 1 1 2 2 ...
 $ Product    : int  1 1 2 2 3 3 4 4 1 1 ...
 $ Liking     : int  5 5 4 4 4 6 6 6 5 5 ...
 $ Information: int  1 2 1 2 1 2 1 2 1 2 ...
 $ Gender     : Factor w/ 2 levels "1","2": 1 1 1 1 1 1 1 1 2 2 ...
 $ Age        : int  46 46 46 46 46 46 46 46 48 48 ...
> 
> 
> 
> cleanEx()
> nameEx("plot.consmixed")
> ### * plot.consmixed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.consmixed
> ### Title: plots the post-hoc for the consmixed object
> ### Aliases: plot.consmixed
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> 
> #convert some variables to factors in Tham
> ham <- convertToFactors(ham, c("Consumer", "Product", "Information", "Gender"))
> 
> res <- consmixed(response="Liking", 
+ Prod_effects= c("Product","Information"), 
+ Cons_effects=c("Gender","Age"), Cons = "Consumer", data =ham, structure=1)
> 
> plot(res)
> 
> 
> 
> cleanEx()
> nameEx("plot.sensmixed")
> ### * plot.sensmixed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot
> ### Title: function creates plots for the sensmixed object
> ### Aliases: plot.sensmixed
> 
> ### ** Examples
> 
> res <- sensmixed(c("Coloursaturation", "Colourbalance"),
+                   Prod_effects=c("TVset"), 
+                   individual="Assessor", data=TVbo, MAM=TRUE, 
+                   reduce.random=FALSE)
  |                                                                              |                                                                      |   0%fixed-effect model matrix is rank deficient so dropping 1 column / coefficient
  |                                                                              |===================================                                   |  50%fixed-effect model matrix is rank deficient so dropping 1 column / coefficient
  |                                                                              |======================================================================| 100%
> plot(res)
Using effs, effs_short, abbreffs as id variables
Using effs as id variables
ymax not defined: adjusting position using y instead
> plot(res, mult = TRUE)
Using effs, effs_short, abbreffs as id variables
Using effs as id variables
> plot(res, interact.symbol = " x ")
Using effs, effs_short, abbreffs as id variables
Using effs as id variables
ymax not defined: adjusting position using y instead
> 
> 
> 
> cleanEx()
> nameEx("saveToDoc")
> ### * saveToDoc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: saveToDoc
> ### Title: save the result in tables into a doc file for sensmixed or
> ###   consmixed objects
> ### Aliases: saveToDoc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D res <- sensmixed(c("Coloursaturation", "Colourbalance"),
> ##D                   Prod_effects=c("TVset"), 
> ##D                   individual="Assessor", data=TVbo)
> ##D 
> ##D saveToDoc(res, file = "C:/Desktop/output.doc")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("sensmixed")
> ### * sensmixed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sensmixed
> ### Title: Analysis of sensory data within a mixed effects model framework
> ### Aliases: sensmixed
> 
> ### ** Examples
> 
> 
> 
> #import SensMixed package
> library(SensMixed)
> 
> #convert some variables to factors in TVbo
> TVbo <- convertToFactors(TVbo, c("Assessor", "Repeat", "Picture"))
> 
> #run automated selection process
> res <- sensmixed(c("Coloursaturation", "Colourbalance"),
+ Prod_effects = c("TVset", "Picture"), replication="Repeat", 
+ individual="Assessor", data=TVbo, MAM=TRUE)
  |                                                                              |                                                                      |   0%fixed-effect model matrix is rank deficient so dropping 1 column / coefficient
  |                                                                              |===================================                                   |  50%fixed-effect model matrix is rank deficient so dropping 1 column / coefficient
  |                                                                              |======================================================================| 100%
> 
> 
> ## run MAManalysis function
> res_MAM <- sensmixed(c("Coloursaturation", "Colourbalance"),
+                  Prod_effects=c("TVset"), replication="Repeat", 
+                   individual="Assessor", data=TVbo, MAM_PER=TRUE)
> ## print is not yet implemented
> ## get anova part
> res_MAM[[3]][,,1]
                 SS     MS  DF     F   Pval
Assessor      54.66   7.81   7  1.21 0.3571
Product      221.51 110.76   2 16.11 0.0024
Scaling       41.89   5.98   7  0.87 0.5703
Disagreement  48.13   6.88   7  7.15 0.0000
Error        161.67   0.96 168    NA     NA
> 
> ## compare with the general implementation
> res <- sensmixed(c("Coloursaturation", "Colourbalance"),
+                   Prod_effects=c("TVset"), 
+                   individual="Assessor", data=TVbo, MAM=TRUE, 
+                   reduce.random=FALSE)
  |                                                                              |                                                                      |   0%fixed-effect model matrix is rank deficient so dropping 1 column / coefficient
  |                                                                              |===================================                                   |  50%fixed-effect model matrix is rank deficient so dropping 1 column / coefficient
  |                                                                              |======================================================================| 100%
> res$fixed      
$Fval
      Coloursaturation Colourbalance
TVset         16.10851      5.582796

$pvalueF
      Coloursaturation Colourbalance
TVset      0.002402584    0.03551977

> 
> ## Not run: 
> ##D plot F and Chi square values
> ##D plot(result)
> ## End(Not run)
> 
> 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  7.19 0.16 7.47 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
